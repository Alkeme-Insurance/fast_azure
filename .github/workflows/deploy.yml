name: Deploy to Azure AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read

env:
  RESOURCE_GROUP: fastazure-rg
  AKS_CLUSTER: fastazure-dev-aks
  ACR_NAME: fastazuredevacr
  # Note: KEY_VAULT_NAME will be retrieved dynamically from Azure

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check and Deploy Infrastructure
        id: infra
        run: |
          echo "üîç Checking if infrastructure exists..."
          
          # Check if ACR exists
          if az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "‚úÖ ACR exists"
            echo "infra_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå ACR not found - deploying infrastructure..."
            echo "infra_exists=false" >> $GITHUB_OUTPUT
            
            # Get admin object ID
            ADMIN_OBJECT_ID=$(az ad signed-in-user show --query id -o tsv 2>/dev/null || echo "")
            if [ -z "$ADMIN_OBJECT_ID" ]; then
              # If signed-in user doesn't work (service principal), use the managed identity
              ADMIN_OBJECT_ID="${{ secrets.AZURE_CLIENT_ID }}"
            fi
            
            echo "üìù Deploying infrastructure via Bicep..."
            
            # Use --no-wait and avoid output to work around Azure CLI bug
            az deployment group create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "fastazure-deployment-${{ github.run_number }}" \
              --template-file infrastructure/bicep/main.bicep \
              --parameters location=eastus2 \
              --parameters environment=dev \
              --parameters adminObjectId="$ADMIN_OBJECT_ID" \
              --parameters azureClientId="${{ secrets.VITE_AZURE_CLIENT_ID }}" \
              --parameters azureTenantId="${{ secrets.VITE_AZURE_TENANT_ID }}" \
              --parameters azureApiScope="${{ secrets.VITE_AZURE_API_SCOPE }}" \
              --parameters 'backendCorsOrigins=["http://localhost:3000","http://localhost:5173","http://localhost:8001"]' \
              --parameters githubRepository="${{ github.repository }}" \
              --no-wait \
              > /dev/null 2>&1 || true
            
            echo "‚úÖ Deployment initiated (running in background)"
            
            echo "‚è≥ Waiting for infrastructure deployment to complete..."
            echo "This may take 10-15 minutes..."
            
            # Wait for deployment to complete
            for i in {1..90}; do
              STATUS=$(az deployment group show \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name "fastazure-deployment-${{ github.run_number }}" \
                --query properties.provisioningState -o tsv 2>/dev/null || echo "InProgress")
              
              echo "[$i/90] Deployment status: $STATUS"
              
              if [ "$STATUS" = "Succeeded" ]; then
                echo "‚úÖ Infrastructure deployment completed!"
                break
              elif [ "$STATUS" = "Failed" ]; then
                echo "‚ùå Infrastructure deployment failed!"
                az deployment group show \
                  --resource-group ${{ env.RESOURCE_GROUP }} \
                  --name "fastazure-deployment-${{ github.run_number }}" \
                  --query properties.error
                exit 1
              fi
              
              sleep 10
            done
            
            # Verify ACR was created
            if ! az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
              echo "‚ùå ACR still not found after deployment!"
              exit 1
            fi
            
            echo "‚úÖ Infrastructure is ready!"
          fi

      - name: Get ACR Login Server and Key Vault Name
        id: acr
        run: |
          ACR_LOGIN_SERVER=$(az acr show --name ${{ env.ACR_NAME }} --query loginServer -o tsv)
          echo "login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          
          # Get Key Vault name from resource group
          KEY_VAULT_NAME=$(az keyvault list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" -o tsv)
          echo "key_vault_name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
          echo "Key Vault: $KEY_VAULT_NAME"

      - name: Build and Push Backend Image
        run: |
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image fastazure-backend:${{ github.sha }} \
            --image fastazure-backend:latest \
            --file backend/Dockerfile \
            .

      - name: Build and Push Frontend Image
        run: |
          # Use GitHub secrets for build-time env vars
          # Build with ACR (supports build args)
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image fastazure-frontend:${{ github.sha }} \
            --image fastazure-frontend:latest \
            --file frontend/Dockerfile \
            --build-arg VITE_API_BASE_URL=http://backend-service:8000 \
            --build-arg VITE_AZURE_CLIENT_ID="${{ secrets.VITE_AZURE_CLIENT_ID }}" \
            --build-arg VITE_AZURE_TENANT_ID="${{ secrets.VITE_AZURE_TENANT_ID }}" \
            --build-arg VITE_AZURE_API_SCOPE="${{ secrets.VITE_AZURE_API_SCOPE }}" \
            --build-arg VITE_DEV_NO_AUTH=false \
            .

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER }} \
            --overwrite-existing

      - name: Setup Kubernetes Namespace and Resources
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace fastazure --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply all Kubernetes manifests
          echo "üìù Applying Kubernetes manifests..."
          kubectl apply -f infrastructure/k8s/namespace.yaml || true
          kubectl apply -f infrastructure/k8s/configmap.yaml || true

      - name: Create/Update Kubernetes Secrets
        run: |
          KEY_VAULT_NAME="${{ steps.acr.outputs.key_vault_name }}"
          
          # Get MongoDB URI from Key Vault
          MONGODB_URI=$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name mongodb-uri --query value -o tsv)
          
          # Delete existing secret if it exists
          kubectl delete secret fastazure-secrets -n fastazure --ignore-not-found=true
          
          # Create Kubernetes secret with MongoDB URI and Azure AD credentials from GitHub secrets
          kubectl create secret generic fastazure-secrets \
            --namespace=fastazure \
            --from-literal=mongodb-uri="$MONGODB_URI" \
            --from-literal=azure-client-id="${{ secrets.VITE_AZURE_CLIENT_ID }}" \
            --from-literal=azure-tenant-id="${{ secrets.VITE_AZURE_TENANT_ID }}" \
            --from-literal=azure-api-scope="${{ secrets.VITE_AZURE_API_SCOPE }}"

      - name: Deploy or Update Kubernetes Applications
        run: |
          # Apply deployments
          echo "üìù Deploying applications..."
          kubectl apply -f infrastructure/k8s/backend-deployment.yaml
          kubectl apply -f infrastructure/k8s/frontend-deployment.yaml
          
          # Update image tags
          echo "üîÑ Updating image tags..."
          kubectl set image deployment/backend \
            backend=${{ steps.acr.outputs.login_server }}/fastazure-backend:${{ github.sha }} \
            -n fastazure
          
          kubectl set image deployment/frontend \
            frontend=${{ steps.acr.outputs.login_server }}/fastazure-frontend:${{ github.sha }} \
            -n fastazure
          
          # Apply ingress and HPA
          kubectl apply -f infrastructure/k8s/ingress.yaml || true
          kubectl apply -f infrastructure/k8s/hpa.yaml || true
          
          # Wait for rollout
          echo "‚è≥ Waiting for deployments to be ready..."
          kubectl rollout status deployment/backend -n fastazure --timeout=5m
          kubectl rollout status deployment/frontend -n fastazure --timeout=5m

      - name: Verify Deployment
        run: |
          echo "=== Pods ==="
          kubectl get pods -n fastazure
          
          echo "=== Services ==="
          kubectl get svc -n fastazure
          
          echo "=== Ingress ==="
          kubectl get ingress -n fastazure || true
          
          # Get external IP
          EXTERNAL_IP=$(kubectl get svc frontend-service -n fastazure -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          echo "Application URL: http://$EXTERNAL_IP"

      - name: Azure Logout
        if: always()
        run: az logout

